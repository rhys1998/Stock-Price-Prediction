# -*- coding: utf-8 -*-
"""stock_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KGTFvzstSWfv6MNQGqTk27o3gcvUZTk8
"""

#This program uses an artificial recurrent neural network called LOng Short term memory
#to predict share price

#import libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt

from datetime import date

today = date.today()

#get the stock quote
df= web.DataReader('msft',data_source='yahoo', start='2012-01-01' , end= today)

#show the data
df

#get the  no of rowes and columns
df.shape

#visualize the closing priice
plt.figure(figsize=(20,10))
plt.title('Closing price')
plt.plot(df['Close'])
plt.xlabel('Closing Price USD ($) ',fontsize=18)
plt.show()

#create a dataframe with only the 'close coloumn'
 data = df.filter(['Close'])
 #convert the data frame into numpy array
 dataset=data.values
 #get the no of rows to train the model on
 training_data_len = math.ceil( len(dataset) * .8)

 training_data_len

#scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)


scaled_data

#create  the training dataset
#create the scaled training dataset
train_data = scaled_data[0:training_data_len, :]
#split the data into x_train and y_train data set
x_train = []
y_train = []


for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train),np.array(y_train)

#Reshape the data
x_train=np.reshape(x_train ,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Build the LSTM model
model = Sequential()
model.add(LSTM(50,return_sequences=True,input_shape= (x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compile the model
model.compile(optimizer='adam' , loss='mean_squared_error')

#Train the model
model.fit(x_train,y_train, batch_size=1 , epochs=1)

#create the testing dataset
#create a new array containing scaled values from index 1543 to 2003
test_data = scaled_data[training_data_len - 60: , :]
#create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len: , :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#convert the data to a numpy array
x_test= np.array(x_test)

#Reshape the datA
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#Get the models predicted price values
predictions = model.predict(x_test)
predictions =  scaler.inverse_transform(predictions)

#Get the root mean suared error(RMSE)
rmse = np.sqrt(np.mean(predictions - y_test)**2)

rmse

#plot the data
train = data[: training_data_len]
valid= data[training_data_len :]
valid['Prediction'] = predictions
#visualize the model
plt.figure(figsize=(20,10))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD($)', fontsize=18)
plt.plot(train['Close'])

plt.show()

#show the valid and actual prices

valid

#get the quote
microsoft_quote = web.DataReader('msft',data_source='yahoo',start='2012-01-01',end='today')

print(microsoft_quote)

#create new dataframe
new_df = microsoft_quote.filter(['Close'])

#Get the last 60 days closing price values and convert the data frame into arrays
last_60_days = new_df[-60: ].values
#print(last_60_days)

last_60_days_scaled = scaler.transform(last_60_days)
#create an empty list
X_test = []
#Append the past 60 days
X_test.append(last_60_days_scaled)

#convert the X_test data into numpy array
X_test=np.array(X_test)
#print(X_test)
#Reshape the data
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#Get the predicted scaled price
pred_price = model.predict(X_test)
#undo scalling
pred_price = scaler.inverse_transform(pred_price)
print (pred_price)

#get the quote
microsoft_quote2 = web.DataReader('msft',data_source='yahoo',start= today ,end= today )
print(microsoft_quote2['Close'])